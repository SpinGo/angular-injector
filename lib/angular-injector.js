// Generated by CoffeeScript 1.7.1
module.exports = {
  annotate: function(src, opts) {
    var chunks, css, falafel, found, isInjector, replace, source, wrap;
    falafel = require('falafel');
    css = require('cssauron-falafel');
    isInjector = css("call > id:contains(" + (opts.token || 'ng') + ")");
    found = false;
    chunks = src.split('');
    source = function(node) {
      var end, start, _ref;
      _ref = node.range, start = _ref[0], end = _ref[1];
      return chunks.slice(start, end).join('');
    };
    replace = function(node, replacement) {
      var end, i, start, _i, _ref, _ref1, _results;
      _ref = node.range, start = _ref[0], end = _ref[1];
      chunks[start] = replacement;
      _results = [];
      for (i = _i = _ref1 = start + 1; _ref1 <= end ? _i < end : _i > end; i = _ref1 <= end ? ++_i : --_i) {
        _results.push(chunks[i] = '');
      }
      return _results;
    };
    wrap = function(node) {
      var param, params;
      params = ((function() {
        var _i, _len, _ref, _results;
        _ref = node.params;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          _results.push(param);
        }
        return _results;
      })()).map(function(_arg) {
        var name;
        name = _arg.name;
        return "'" + name + "'";
      });
      return "[" + (params.join(', ')) + ", " + (source(node)) + "]";
    };
    falafel(src, function(node) {
      var angularFn, callExpression;
      if (isInjector(node)) {
        callExpression = node.parent;
        angularFn = callExpression["arguments"][0];
        replace(callExpression, wrap(angularFn));
        return found = true;
      }
    });
    if (found) {
      src = chunks.join('');
    }
    return src;
  }
};
